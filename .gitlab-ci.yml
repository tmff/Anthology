# This file is a template, and might need editing before it works on your project.
# This is a sample GitLab CI/CD configuration file that should run without any modifications.
# It demonstrates a basic 3 stage CI/CD pipeline. Instead of real tests or scripts,
# it uses echo commands to simulate the pipeline execution.
#
# A pipeline is composed of independent jobs that run scripts, grouped into stages.
# Stages run in sequential order, but jobs within stages run in parallel.
#
# For more information, see: https://docs.gitlab.com/ee/ci/yaml/index.html#stages
#
# You can copy and paste this template into a new `.gitlab-ci.yml` file.
# You should not add this template to an existing `.gitlab-ci.yml` file by using the `include:` keyword.
#
# To contribute improvements to CI/CD templates, please follow the Development guide at:
# https://docs.gitlab.com/ee/development/cicd/templates.html
# This specific template is located at:
# https://gitlab.com/gitlab-org/gitlab/-/blob/master/lib/gitlab/ci/templates/Getting-Started.gitlab-ci.yml

variables:
  CI_IMG: teamproject
  CI_FULL_IMG: "${CI_REGISTRY_IMAGE}/${CI_IMG}"
  REPLACE_CMD: "sed -i 's|image: teamproject|image: ${CI_FULL_IMG}|g' ~/team-project-deployment/docker/app.yml"
stages:          # List of stages for jobs, and their order of execution
  - check
  - test
  - build
  - publish
  - deploy
before_script:
  - export BASE_DIR="`pwd`"

check-django:
  image: python:3.10.10
  stage: check
  tags: 
  - python
  script:
  - echo "Checking the Django project..."
  - python --version
  - cd $BASE_DIR/backend
  - pip install pipenv
  - pipenv install
  - pipenv run python manage.py check
  - cd $BASE_DIR
  - echo "Django checks complete."

.build-react:
  image: node:16
  stage: build
  tags:
    - node
  script:
  - echo "Compiling React..."
  - cd $BASE_DIR/poemfrontend
  - npm install
  - npm run build
  - cd $BASE_DIR
  - echo "React compilation complete."

.migrations-django:
  image: python:3.10.10
  stage: build
  tags:
  - python
  script:
  - echo "Running Django migrations..."
  - cd $BASE_DIR/backend
  - pip install pipenv
  - pipenv install
  - pipenv run python manage.py makemigrations
  - pipenv run python manage.py migrate
  - pipenv run python manage.py check
  - cd $BASE_DIR
  - echo "Django migrations complete."

build-docker:
  image: docker:latest
  stage: build
  services:
  - docker:dind
  variables:
    DOCKER_HOST: 'tcp://docker:2375'
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
  - echo "Pruning unneeded images..."
  - docker image prune --filter label=stage=intermediate
  - echo "Building the docker image..."
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker build --pull -t ${CI_FULL_IMG}:frontend --build-arg api_endpoint=$API_ENDPOINT --platform linux/arm64 ./poemfrontend/
  - docker push ${CI_FULL_IMG}:frontend
  - docker build --pull -t ${CI_FULL_IMG}:backend --platform linux/arm64 ./backend/
  - docker push ${CI_FULL_IMG}:backend

test-django:
  image: python:3.10.10
  stage: test
  tags: 
  - python
  script:
  - echo "Running Django tests..."
  - cd $BASE_DIR/backend
  - pip install pipenv
  - pipenv install
  - pipenv run python manage.py test
  - cd $BASE_DIR
  - echo "Finished Django tests."

test-react:
  image: node:16
  stage: test
  tags:
    - node
  script:
  - echo "Running React tests..."
  - cd $BASE_DIR/poemfrontend
  - npm install react-scripts --save-dev
  - npm run test:ci
  - cd $BASE_DIR
  - echo "Finished React tests."
  artifacts:
    paths:
      - poemfrontend/junit.xml
    when: always
    reports:
      junit:
        - junit.xml

deploy-git:
  image: alpine:latest
  stage: deploy
  when: on_success
  only:
    - react
  before_script: 
    - chmod og= $RSA
    - apk update && apk add openssh-client
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker compose -f ~/team-project-deployment/docker/app.yml down || true"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker rm -f $(docker ps -a -q) || true"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker volume rm $(docker volume ls -q) || true"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "rm -rf ~/team-project-deployment || true"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker pull ${CI_FULL_IMG}:frontend"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker pull ${CI_FULL_IMG}:backend"
  script:
    - scp -o StrictHostKeyChecking=no -i $RSA -r . $VM_USER@$VM:~/team-project-deployment
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "${REPLACE_CMD}"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "echo API_ENDPOINT=${API_ENDPOINT} >> ~/team-project-deployment/docker/.env"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "echo HTTP_PROXY=http://teamproject-app:8000 >> ~/team-project-deployment/docker/.env"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "echo DJANGO_DEBUG=${DJANGO_DEBUG} >> ~/team-project-deployment/docker/.env"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "echo 'DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}' >> ~/team-project-deployment/docker/.env"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "echo POSTGRES_HOST=${POSTGRES_HOST} >> ~/team-project-deployment/docker/.env"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "echo POSTGRES_PORT=${POSTGRES_PORT} >> ~/team-project-deployment/docker/.env"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "echo POSTGRES_DB=${POSTGRES_DB} >> ~/team-project-deployment/docker/.env"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "echo POSTGRES_USER=${POSTGRES_USER} >> ~/team-project-deployment/docker/.env"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "echo POSTGRES_PASSWORD=${POSTGRES_PASSWORD} >> ~/team-project-deployment/docker/.env"
    - ssh -o StrictHostKeyChecking=no -i $RSA $VM_USER@$VM "docker compose -f ~/team-project-deployment/docker/app.yml up -d"
